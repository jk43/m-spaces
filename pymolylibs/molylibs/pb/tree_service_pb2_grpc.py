# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import molylibs.pb.tree_service_pb2 as tree__service__pb2

GRPC_GENERATED_VERSION = '1.65.4'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in tree_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class TreeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAncestors = channel.unary_unary(
                '/treeservice.TreeService/GetAncestors',
                request_serializer=tree__service__pb2.TreeRequest.SerializeToString,
                response_deserializer=tree__service__pb2.TreeResponse.FromString,
                _registered_method=True)
        self.GetRoot = channel.unary_unary(
                '/treeservice.TreeService/GetRoot',
                request_serializer=tree__service__pb2.TreeRequest.SerializeToString,
                response_deserializer=tree__service__pb2.TreeResponse.FromString,
                _registered_method=True)
        self.GetTree = channel.unary_unary(
                '/treeservice.TreeService/GetTree',
                request_serializer=tree__service__pb2.TreeRequest.SerializeToString,
                response_deserializer=tree__service__pb2.TreeResponse.FromString,
                _registered_method=True)
        self.GetTreeAsArray = channel.unary_unary(
                '/treeservice.TreeService/GetTreeAsArray',
                request_serializer=tree__service__pb2.TreeRequest.SerializeToString,
                response_deserializer=tree__service__pb2.TreeResponse.FromString,
                _registered_method=True)
        self.GetOne = channel.unary_unary(
                '/treeservice.TreeService/GetOne',
                request_serializer=tree__service__pb2.TreeRequest.SerializeToString,
                response_deserializer=tree__service__pb2.TreeResponse.FromString,
                _registered_method=True)
        self.Delete = channel.unary_unary(
                '/treeservice.TreeService/Delete',
                request_serializer=tree__service__pb2.TreeRequest.SerializeToString,
                response_deserializer=tree__service__pb2.TreeResponse.FromString,
                _registered_method=True)
        self.Update = channel.unary_unary(
                '/treeservice.TreeService/Update',
                request_serializer=tree__service__pb2.TreeRequest.SerializeToString,
                response_deserializer=tree__service__pb2.TreeResponse.FromString,
                _registered_method=True)
        self.GetSibling = channel.unary_unary(
                '/treeservice.TreeService/GetSibling',
                request_serializer=tree__service__pb2.TreeRequest.SerializeToString,
                response_deserializer=tree__service__pb2.TreeResponse.FromString,
                _registered_method=True)
        self.GetChildren = channel.unary_unary(
                '/treeservice.TreeService/GetChildren',
                request_serializer=tree__service__pb2.TreeRequest.SerializeToString,
                response_deserializer=tree__service__pb2.TreeResponse.FromString,
                _registered_method=True)
        self.GetPath = channel.unary_unary(
                '/treeservice.TreeService/GetPath',
                request_serializer=tree__service__pb2.TreeRequest.SerializeToString,
                response_deserializer=tree__service__pb2.TreeResponse.FromString,
                _registered_method=True)
        self.GetParent = channel.unary_unary(
                '/treeservice.TreeService/GetParent',
                request_serializer=tree__service__pb2.TreeRequest.SerializeToString,
                response_deserializer=tree__service__pb2.TreeResponse.FromString,
                _registered_method=True)
        self.IsEnd = channel.unary_unary(
                '/treeservice.TreeService/IsEnd',
                request_serializer=tree__service__pb2.TreeRequest.SerializeToString,
                response_deserializer=tree__service__pb2.BoolResponse.FromString,
                _registered_method=True)


class TreeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAncestors(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRoot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTree(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTreeAsArray(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOne(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSibling(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChildren(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPath(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetParent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsEnd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TreeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAncestors': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAncestors,
                    request_deserializer=tree__service__pb2.TreeRequest.FromString,
                    response_serializer=tree__service__pb2.TreeResponse.SerializeToString,
            ),
            'GetRoot': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRoot,
                    request_deserializer=tree__service__pb2.TreeRequest.FromString,
                    response_serializer=tree__service__pb2.TreeResponse.SerializeToString,
            ),
            'GetTree': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTree,
                    request_deserializer=tree__service__pb2.TreeRequest.FromString,
                    response_serializer=tree__service__pb2.TreeResponse.SerializeToString,
            ),
            'GetTreeAsArray': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTreeAsArray,
                    request_deserializer=tree__service__pb2.TreeRequest.FromString,
                    response_serializer=tree__service__pb2.TreeResponse.SerializeToString,
            ),
            'GetOne': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOne,
                    request_deserializer=tree__service__pb2.TreeRequest.FromString,
                    response_serializer=tree__service__pb2.TreeResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=tree__service__pb2.TreeRequest.FromString,
                    response_serializer=tree__service__pb2.TreeResponse.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=tree__service__pb2.TreeRequest.FromString,
                    response_serializer=tree__service__pb2.TreeResponse.SerializeToString,
            ),
            'GetSibling': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSibling,
                    request_deserializer=tree__service__pb2.TreeRequest.FromString,
                    response_serializer=tree__service__pb2.TreeResponse.SerializeToString,
            ),
            'GetChildren': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChildren,
                    request_deserializer=tree__service__pb2.TreeRequest.FromString,
                    response_serializer=tree__service__pb2.TreeResponse.SerializeToString,
            ),
            'GetPath': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPath,
                    request_deserializer=tree__service__pb2.TreeRequest.FromString,
                    response_serializer=tree__service__pb2.TreeResponse.SerializeToString,
            ),
            'GetParent': grpc.unary_unary_rpc_method_handler(
                    servicer.GetParent,
                    request_deserializer=tree__service__pb2.TreeRequest.FromString,
                    response_serializer=tree__service__pb2.TreeResponse.SerializeToString,
            ),
            'IsEnd': grpc.unary_unary_rpc_method_handler(
                    servicer.IsEnd,
                    request_deserializer=tree__service__pb2.TreeRequest.FromString,
                    response_serializer=tree__service__pb2.BoolResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'treeservice.TreeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('treeservice.TreeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TreeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAncestors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/treeservice.TreeService/GetAncestors',
            tree__service__pb2.TreeRequest.SerializeToString,
            tree__service__pb2.TreeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRoot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/treeservice.TreeService/GetRoot',
            tree__service__pb2.TreeRequest.SerializeToString,
            tree__service__pb2.TreeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTree(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/treeservice.TreeService/GetTree',
            tree__service__pb2.TreeRequest.SerializeToString,
            tree__service__pb2.TreeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTreeAsArray(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/treeservice.TreeService/GetTreeAsArray',
            tree__service__pb2.TreeRequest.SerializeToString,
            tree__service__pb2.TreeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOne(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/treeservice.TreeService/GetOne',
            tree__service__pb2.TreeRequest.SerializeToString,
            tree__service__pb2.TreeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/treeservice.TreeService/Delete',
            tree__service__pb2.TreeRequest.SerializeToString,
            tree__service__pb2.TreeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/treeservice.TreeService/Update',
            tree__service__pb2.TreeRequest.SerializeToString,
            tree__service__pb2.TreeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSibling(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/treeservice.TreeService/GetSibling',
            tree__service__pb2.TreeRequest.SerializeToString,
            tree__service__pb2.TreeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetChildren(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/treeservice.TreeService/GetChildren',
            tree__service__pb2.TreeRequest.SerializeToString,
            tree__service__pb2.TreeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPath(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/treeservice.TreeService/GetPath',
            tree__service__pb2.TreeRequest.SerializeToString,
            tree__service__pb2.TreeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetParent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/treeservice.TreeService/GetParent',
            tree__service__pb2.TreeRequest.SerializeToString,
            tree__service__pb2.TreeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IsEnd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/treeservice.TreeService/IsEnd',
            tree__service__pb2.TreeRequest.SerializeToString,
            tree__service__pb2.BoolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
