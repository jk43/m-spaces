// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: rbac-service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RBACServiceClient is the client API for RBACService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RBACServiceClient interface {
	GetPolicy(ctx context.Context, in *RBACRequest, opts ...grpc.CallOption) (*RBACResponse, error)
	GetModel(ctx context.Context, in *RBACRequest, opts ...grpc.CallOption) (*ModelResponse, error)
	GetModelAndPolicy(ctx context.Context, in *RBACRequest, opts ...grpc.CallOption) (*ModelAndPolicyResponse, error)
}

type rBACServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRBACServiceClient(cc grpc.ClientConnInterface) RBACServiceClient {
	return &rBACServiceClient{cc}
}

func (c *rBACServiceClient) GetPolicy(ctx context.Context, in *RBACRequest, opts ...grpc.CallOption) (*RBACResponse, error) {
	out := new(RBACResponse)
	err := c.cc.Invoke(ctx, "/rbacservice.RBACService/GetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetModel(ctx context.Context, in *RBACRequest, opts ...grpc.CallOption) (*ModelResponse, error) {
	out := new(ModelResponse)
	err := c.cc.Invoke(ctx, "/rbacservice.RBACService/GetModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetModelAndPolicy(ctx context.Context, in *RBACRequest, opts ...grpc.CallOption) (*ModelAndPolicyResponse, error) {
	out := new(ModelAndPolicyResponse)
	err := c.cc.Invoke(ctx, "/rbacservice.RBACService/GetModelAndPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RBACServiceServer is the server API for RBACService service.
// All implementations must embed UnimplementedRBACServiceServer
// for forward compatibility
type RBACServiceServer interface {
	GetPolicy(context.Context, *RBACRequest) (*RBACResponse, error)
	GetModel(context.Context, *RBACRequest) (*ModelResponse, error)
	GetModelAndPolicy(context.Context, *RBACRequest) (*ModelAndPolicyResponse, error)
	mustEmbedUnimplementedRBACServiceServer()
}

// UnimplementedRBACServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRBACServiceServer struct {
}

func (UnimplementedRBACServiceServer) GetPolicy(context.Context, *RBACRequest) (*RBACResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedRBACServiceServer) GetModel(context.Context, *RBACRequest) (*ModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModel not implemented")
}
func (UnimplementedRBACServiceServer) GetModelAndPolicy(context.Context, *RBACRequest) (*ModelAndPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelAndPolicy not implemented")
}
func (UnimplementedRBACServiceServer) mustEmbedUnimplementedRBACServiceServer() {}

// UnsafeRBACServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RBACServiceServer will
// result in compilation errors.
type UnsafeRBACServiceServer interface {
	mustEmbedUnimplementedRBACServiceServer()
}

func RegisterRBACServiceServer(s grpc.ServiceRegistrar, srv RBACServiceServer) {
	s.RegisterService(&RBACService_ServiceDesc, srv)
}

func _RBACService_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RBACRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacservice.RBACService/GetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetPolicy(ctx, req.(*RBACRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RBACRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacservice.RBACService/GetModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetModel(ctx, req.(*RBACRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetModelAndPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RBACRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetModelAndPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacservice.RBACService/GetModelAndPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetModelAndPolicy(ctx, req.(*RBACRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RBACService_ServiceDesc is the grpc.ServiceDesc for RBACService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RBACService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rbacservice.RBACService",
	HandlerType: (*RBACServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPolicy",
			Handler:    _RBACService_GetPolicy_Handler,
		},
		{
			MethodName: "GetModel",
			Handler:    _RBACService_GetModel_Handler,
		},
		{
			MethodName: "GetModelAndPolicy",
			Handler:    _RBACService_GetModelAndPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rbac-service.proto",
}
