// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: organization-service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrganizationServiceClient is the client API for OrganizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationServiceClient interface {
	GetOrgID(ctx context.Context, in *OrgRequest, opts ...grpc.CallOption) (*OrgIDResponse, error)
	GetOrg(ctx context.Context, in *OrgRequest, opts ...grpc.CallOption) (*OrgResponse, error)
	GetOrgSettings(ctx context.Context, in *OrgSettingRequest, opts ...grpc.CallOption) (*OrgResponse, error)
	SetOrgServiceSettings(ctx context.Context, in *OrgServiceSettings, opts ...grpc.CallOption) (*OrgServiceSettings, error)
	GetOrgServiceSettingsByKey(ctx context.Context, in *OrgServiceSettings, opts ...grpc.CallOption) (*OrgServiceSettings, error)
}

type organizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationServiceClient(cc grpc.ClientConnInterface) OrganizationServiceClient {
	return &organizationServiceClient{cc}
}

func (c *organizationServiceClient) GetOrgID(ctx context.Context, in *OrgRequest, opts ...grpc.CallOption) (*OrgIDResponse, error) {
	out := new(OrgIDResponse)
	err := c.cc.Invoke(ctx, "/organizationservice.OrganizationService/GetOrgID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetOrg(ctx context.Context, in *OrgRequest, opts ...grpc.CallOption) (*OrgResponse, error) {
	out := new(OrgResponse)
	err := c.cc.Invoke(ctx, "/organizationservice.OrganizationService/GetOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetOrgSettings(ctx context.Context, in *OrgSettingRequest, opts ...grpc.CallOption) (*OrgResponse, error) {
	out := new(OrgResponse)
	err := c.cc.Invoke(ctx, "/organizationservice.OrganizationService/GetOrgSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) SetOrgServiceSettings(ctx context.Context, in *OrgServiceSettings, opts ...grpc.CallOption) (*OrgServiceSettings, error) {
	out := new(OrgServiceSettings)
	err := c.cc.Invoke(ctx, "/organizationservice.OrganizationService/SetOrgServiceSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetOrgServiceSettingsByKey(ctx context.Context, in *OrgServiceSettings, opts ...grpc.CallOption) (*OrgServiceSettings, error) {
	out := new(OrgServiceSettings)
	err := c.cc.Invoke(ctx, "/organizationservice.OrganizationService/GetOrgServiceSettingsByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationServiceServer is the server API for OrganizationService service.
// All implementations must embed UnimplementedOrganizationServiceServer
// for forward compatibility
type OrganizationServiceServer interface {
	GetOrgID(context.Context, *OrgRequest) (*OrgIDResponse, error)
	GetOrg(context.Context, *OrgRequest) (*OrgResponse, error)
	GetOrgSettings(context.Context, *OrgSettingRequest) (*OrgResponse, error)
	SetOrgServiceSettings(context.Context, *OrgServiceSettings) (*OrgServiceSettings, error)
	GetOrgServiceSettingsByKey(context.Context, *OrgServiceSettings) (*OrgServiceSettings, error)
	mustEmbedUnimplementedOrganizationServiceServer()
}

// UnimplementedOrganizationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationServiceServer struct {
}

func (UnimplementedOrganizationServiceServer) GetOrgID(context.Context, *OrgRequest) (*OrgIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgID not implemented")
}
func (UnimplementedOrganizationServiceServer) GetOrg(context.Context, *OrgRequest) (*OrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrg not implemented")
}
func (UnimplementedOrganizationServiceServer) GetOrgSettings(context.Context, *OrgSettingRequest) (*OrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgSettings not implemented")
}
func (UnimplementedOrganizationServiceServer) SetOrgServiceSettings(context.Context, *OrgServiceSettings) (*OrgServiceSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrgServiceSettings not implemented")
}
func (UnimplementedOrganizationServiceServer) GetOrgServiceSettingsByKey(context.Context, *OrgServiceSettings) (*OrgServiceSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgServiceSettingsByKey not implemented")
}
func (UnimplementedOrganizationServiceServer) mustEmbedUnimplementedOrganizationServiceServer() {}

// UnsafeOrganizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationServiceServer will
// result in compilation errors.
type UnsafeOrganizationServiceServer interface {
	mustEmbedUnimplementedOrganizationServiceServer()
}

func RegisterOrganizationServiceServer(s grpc.ServiceRegistrar, srv OrganizationServiceServer) {
	s.RegisterService(&OrganizationService_ServiceDesc, srv)
}

func _OrganizationService_GetOrgID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetOrgID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organizationservice.OrganizationService/GetOrgID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetOrgID(ctx, req.(*OrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organizationservice.OrganizationService/GetOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetOrg(ctx, req.(*OrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetOrgSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetOrgSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organizationservice.OrganizationService/GetOrgSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetOrgSettings(ctx, req.(*OrgSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_SetOrgServiceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgServiceSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).SetOrgServiceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organizationservice.OrganizationService/SetOrgServiceSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).SetOrgServiceSettings(ctx, req.(*OrgServiceSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetOrgServiceSettingsByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgServiceSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetOrgServiceSettingsByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organizationservice.OrganizationService/GetOrgServiceSettingsByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetOrgServiceSettingsByKey(ctx, req.(*OrgServiceSettings))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationService_ServiceDesc is the grpc.ServiceDesc for OrganizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "organizationservice.OrganizationService",
	HandlerType: (*OrganizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrgID",
			Handler:    _OrganizationService_GetOrgID_Handler,
		},
		{
			MethodName: "GetOrg",
			Handler:    _OrganizationService_GetOrg_Handler,
		},
		{
			MethodName: "GetOrgSettings",
			Handler:    _OrganizationService_GetOrgSettings_Handler,
		},
		{
			MethodName: "SetOrgServiceSettings",
			Handler:    _OrganizationService_SetOrgServiceSettings_Handler,
		},
		{
			MethodName: "GetOrgServiceSettingsByKey",
			Handler:    _OrganizationService_GetOrgServiceSettingsByKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "organization-service.proto",
}
