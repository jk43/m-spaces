// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: tree-service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TreeServiceClient is the client API for TreeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TreeServiceClient interface {
	GetAncestors(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error)
	GetRoot(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error)
	GetTree(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error)
	GetTreeAsArray(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error)
	GetOne(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error)
	Delete(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error)
	Update(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error)
	GetSibling(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error)
	GetChildren(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error)
	GetPath(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error)
	GetParent(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error)
	IsEnd(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*BoolResponse, error)
}

type treeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTreeServiceClient(cc grpc.ClientConnInterface) TreeServiceClient {
	return &treeServiceClient{cc}
}

func (c *treeServiceClient) GetAncestors(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error) {
	out := new(TreeResponse)
	err := c.cc.Invoke(ctx, "/treeservice.TreeService/GetAncestors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeServiceClient) GetRoot(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error) {
	out := new(TreeResponse)
	err := c.cc.Invoke(ctx, "/treeservice.TreeService/GetRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeServiceClient) GetTree(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error) {
	out := new(TreeResponse)
	err := c.cc.Invoke(ctx, "/treeservice.TreeService/GetTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeServiceClient) GetTreeAsArray(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error) {
	out := new(TreeResponse)
	err := c.cc.Invoke(ctx, "/treeservice.TreeService/GetTreeAsArray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeServiceClient) GetOne(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error) {
	out := new(TreeResponse)
	err := c.cc.Invoke(ctx, "/treeservice.TreeService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeServiceClient) Delete(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error) {
	out := new(TreeResponse)
	err := c.cc.Invoke(ctx, "/treeservice.TreeService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeServiceClient) Update(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error) {
	out := new(TreeResponse)
	err := c.cc.Invoke(ctx, "/treeservice.TreeService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeServiceClient) GetSibling(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error) {
	out := new(TreeResponse)
	err := c.cc.Invoke(ctx, "/treeservice.TreeService/GetSibling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeServiceClient) GetChildren(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error) {
	out := new(TreeResponse)
	err := c.cc.Invoke(ctx, "/treeservice.TreeService/GetChildren", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeServiceClient) GetPath(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error) {
	out := new(TreeResponse)
	err := c.cc.Invoke(ctx, "/treeservice.TreeService/GetPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeServiceClient) GetParent(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error) {
	out := new(TreeResponse)
	err := c.cc.Invoke(ctx, "/treeservice.TreeService/GetParent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeServiceClient) IsEnd(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/treeservice.TreeService/IsEnd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TreeServiceServer is the server API for TreeService service.
// All implementations must embed UnimplementedTreeServiceServer
// for forward compatibility
type TreeServiceServer interface {
	GetAncestors(context.Context, *TreeRequest) (*TreeResponse, error)
	GetRoot(context.Context, *TreeRequest) (*TreeResponse, error)
	GetTree(context.Context, *TreeRequest) (*TreeResponse, error)
	GetTreeAsArray(context.Context, *TreeRequest) (*TreeResponse, error)
	GetOne(context.Context, *TreeRequest) (*TreeResponse, error)
	Delete(context.Context, *TreeRequest) (*TreeResponse, error)
	Update(context.Context, *TreeRequest) (*TreeResponse, error)
	GetSibling(context.Context, *TreeRequest) (*TreeResponse, error)
	GetChildren(context.Context, *TreeRequest) (*TreeResponse, error)
	GetPath(context.Context, *TreeRequest) (*TreeResponse, error)
	GetParent(context.Context, *TreeRequest) (*TreeResponse, error)
	IsEnd(context.Context, *TreeRequest) (*BoolResponse, error)
	mustEmbedUnimplementedTreeServiceServer()
}

// UnimplementedTreeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTreeServiceServer struct {
}

func (UnimplementedTreeServiceServer) GetAncestors(context.Context, *TreeRequest) (*TreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAncestors not implemented")
}
func (UnimplementedTreeServiceServer) GetRoot(context.Context, *TreeRequest) (*TreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoot not implemented")
}
func (UnimplementedTreeServiceServer) GetTree(context.Context, *TreeRequest) (*TreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTree not implemented")
}
func (UnimplementedTreeServiceServer) GetTreeAsArray(context.Context, *TreeRequest) (*TreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTreeAsArray not implemented")
}
func (UnimplementedTreeServiceServer) GetOne(context.Context, *TreeRequest) (*TreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedTreeServiceServer) Delete(context.Context, *TreeRequest) (*TreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTreeServiceServer) Update(context.Context, *TreeRequest) (*TreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTreeServiceServer) GetSibling(context.Context, *TreeRequest) (*TreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSibling not implemented")
}
func (UnimplementedTreeServiceServer) GetChildren(context.Context, *TreeRequest) (*TreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChildren not implemented")
}
func (UnimplementedTreeServiceServer) GetPath(context.Context, *TreeRequest) (*TreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPath not implemented")
}
func (UnimplementedTreeServiceServer) GetParent(context.Context, *TreeRequest) (*TreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParent not implemented")
}
func (UnimplementedTreeServiceServer) IsEnd(context.Context, *TreeRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsEnd not implemented")
}
func (UnimplementedTreeServiceServer) mustEmbedUnimplementedTreeServiceServer() {}

// UnsafeTreeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TreeServiceServer will
// result in compilation errors.
type UnsafeTreeServiceServer interface {
	mustEmbedUnimplementedTreeServiceServer()
}

func RegisterTreeServiceServer(s grpc.ServiceRegistrar, srv TreeServiceServer) {
	s.RegisterService(&TreeService_ServiceDesc, srv)
}

func _TreeService_GetAncestors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).GetAncestors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/treeservice.TreeService/GetAncestors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).GetAncestors(ctx, req.(*TreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeService_GetRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).GetRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/treeservice.TreeService/GetRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).GetRoot(ctx, req.(*TreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeService_GetTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).GetTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/treeservice.TreeService/GetTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).GetTree(ctx, req.(*TreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeService_GetTreeAsArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).GetTreeAsArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/treeservice.TreeService/GetTreeAsArray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).GetTreeAsArray(ctx, req.(*TreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/treeservice.TreeService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).GetOne(ctx, req.(*TreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/treeservice.TreeService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).Delete(ctx, req.(*TreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/treeservice.TreeService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).Update(ctx, req.(*TreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeService_GetSibling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).GetSibling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/treeservice.TreeService/GetSibling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).GetSibling(ctx, req.(*TreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeService_GetChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).GetChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/treeservice.TreeService/GetChildren",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).GetChildren(ctx, req.(*TreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeService_GetPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).GetPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/treeservice.TreeService/GetPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).GetPath(ctx, req.(*TreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeService_GetParent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).GetParent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/treeservice.TreeService/GetParent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).GetParent(ctx, req.(*TreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeService_IsEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).IsEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/treeservice.TreeService/IsEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).IsEnd(ctx, req.(*TreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TreeService_ServiceDesc is the grpc.ServiceDesc for TreeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TreeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "treeservice.TreeService",
	HandlerType: (*TreeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAncestors",
			Handler:    _TreeService_GetAncestors_Handler,
		},
		{
			MethodName: "GetRoot",
			Handler:    _TreeService_GetRoot_Handler,
		},
		{
			MethodName: "GetTree",
			Handler:    _TreeService_GetTree_Handler,
		},
		{
			MethodName: "GetTreeAsArray",
			Handler:    _TreeService_GetTreeAsArray_Handler,
		},
		{
			MethodName: "GetOne",
			Handler:    _TreeService_GetOne_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TreeService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TreeService_Update_Handler,
		},
		{
			MethodName: "GetSibling",
			Handler:    _TreeService_GetSibling_Handler,
		},
		{
			MethodName: "GetChildren",
			Handler:    _TreeService_GetChildren_Handler,
		},
		{
			MethodName: "GetPath",
			Handler:    _TreeService_GetPath_Handler,
		},
		{
			MethodName: "GetParent",
			Handler:    _TreeService_GetParent_Handler,
		},
		{
			MethodName: "IsEnd",
			Handler:    _TreeService_IsEnd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tree-service.proto",
}
