// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: file-client.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileClientClient is the client API for FileClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileClientClient interface {
	GetFileRules(ctx context.Context, in *FileRulesRequest, opts ...grpc.CallOption) (*FileRulesResponse, error)
	SaveFileData(ctx context.Context, in *FileSaveDataRequest, opts ...grpc.CallOption) (*FileSaveDataResponse, error)
}

type fileClientClient struct {
	cc grpc.ClientConnInterface
}

func NewFileClientClient(cc grpc.ClientConnInterface) FileClientClient {
	return &fileClientClient{cc}
}

func (c *fileClientClient) GetFileRules(ctx context.Context, in *FileRulesRequest, opts ...grpc.CallOption) (*FileRulesResponse, error) {
	out := new(FileRulesResponse)
	err := c.cc.Invoke(ctx, "/fileclient.FileClient/GetFileRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClientClient) SaveFileData(ctx context.Context, in *FileSaveDataRequest, opts ...grpc.CallOption) (*FileSaveDataResponse, error) {
	out := new(FileSaveDataResponse)
	err := c.cc.Invoke(ctx, "/fileclient.FileClient/SaveFileData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileClientServer is the server API for FileClient service.
// All implementations must embed UnimplementedFileClientServer
// for forward compatibility
type FileClientServer interface {
	GetFileRules(context.Context, *FileRulesRequest) (*FileRulesResponse, error)
	SaveFileData(context.Context, *FileSaveDataRequest) (*FileSaveDataResponse, error)
	mustEmbedUnimplementedFileClientServer()
}

// UnimplementedFileClientServer must be embedded to have forward compatible implementations.
type UnimplementedFileClientServer struct {
}

func (UnimplementedFileClientServer) GetFileRules(context.Context, *FileRulesRequest) (*FileRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileRules not implemented")
}
func (UnimplementedFileClientServer) SaveFileData(context.Context, *FileSaveDataRequest) (*FileSaveDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveFileData not implemented")
}
func (UnimplementedFileClientServer) mustEmbedUnimplementedFileClientServer() {}

// UnsafeFileClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileClientServer will
// result in compilation errors.
type UnsafeFileClientServer interface {
	mustEmbedUnimplementedFileClientServer()
}

func RegisterFileClientServer(s grpc.ServiceRegistrar, srv FileClientServer) {
	s.RegisterService(&FileClient_ServiceDesc, srv)
}

func _FileClient_GetFileRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileClientServer).GetFileRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fileclient.FileClient/GetFileRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileClientServer).GetFileRules(ctx, req.(*FileRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileClient_SaveFileData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileSaveDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileClientServer).SaveFileData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fileclient.FileClient/SaveFileData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileClientServer).SaveFileData(ctx, req.(*FileSaveDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileClient_ServiceDesc is the grpc.ServiceDesc for FileClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fileclient.FileClient",
	HandlerType: (*FileClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFileRules",
			Handler:    _FileClient_GetFileRules_Handler,
		},
		{
			MethodName: "SaveFileData",
			Handler:    _FileClient_SaveFileData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file-client.proto",
}
